Here is a step-by-step explanation of the concept used in the given code:

**Concept:** The code uses the concept of mathematical formulas and loops to find the missing number in an array.

**Step-by-Step Explanation:**

1. `int n = arr.size() + 1;`:
   - The code calculates the total number of elements that should be in the array, including the missing one.
   - `arr.size()` returns the number of elements currently present in the array.
   - `+1` adds the missing element to the total count.
   - The variable `n` now holds the total number of elements, including the missing one.

2. `int total = n * (n + 1) / 2;`:
   - This line calculates the total sum of all numbers from 0 to `n` (inclusive).
   - The formula `n * (n + 1) / 2` is used to calculate the sum of first `n` natural numbers.
   - The variable `total` now holds the total sum of all numbers from 0 to `n` (inclusive).

3. `int sum = 0;` and `for (int i = 0; i < arr.size(); ++i) { sum += arr[i]; }`:
   - The `sum` variable is initialized to 0.
   - A loop iterates over each element in the array.
   - For each element, the sum is updated by adding the current element to `sum`.
   - The variable `sum` now holds the sum of all numbers present in the array.

4. `return total - sum;`:
   - The code calculates the difference between the total sum of all numbers from 0 to `n` (inclusive) and the sum of all numbers present in the array.
   - The missing number is then returned, as it must be the number that was missing from the array.

**Output:**
The code will return the missing number in the array.

**Time Complexity:** O(n)
**Space Complexity:** O(1)

This code is efficient and accurate for finding the missing number in a sorted array.